data:text/html;base64,<!DOCTYPE html>
<html>
<head>
    <title>Interactive Image Overlay with Separate Controls</title>
    <style>
        .file-input-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            border: 4px solid #000;
            border-radius: 20px;
            background-color: #84c8d5;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .file-input {
            display: none;
        }

        .file-input-container:hover {
            background-color: #e3ff88;
        }

        #overlayGallery img {
            cursor: pointer;
            width: 100px;
            height: 100px;
            object-fit: cover;
            margin: 5px;
            border: 2px solid transparent;
        }

        #overlayGallery img.selected {
            border-color: #000;
        }

        #canvas {
            border: 1px solid black;
            margin-bottom: 10px;
        }

        .controls {
            margin-top: 10px;
            display: flex;
            justify-content: center;
        }

        .controls button {
            margin: 5px;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div class="file-input-container">
        <label for="imageInput">Upload Image to Overlay</label>
        <input type="file" id="imageInput" accept="image/*" class="file-input">
    </div>

    <div class="file-input-container">
        <label for="overlayInput">Upload Custom Overlay Image</label>
        <input type="file" id="overlayInput" accept="image/*" class="file-input">
    </div>

    <div id="overlayGallery"></div>

    <canvas id="canvas"></canvas>

    <div class="controls">
        <button id="rotateLeft">Rotate Left</button>
        <button id="rotateRight">Rotate Right</button>
        <button id="flipHorizontal">Flip Horizontal</button>
        <button id="flipVertical">Flip Vertical</button>
        <button id="saveImage">Save Image</button>
    </div>

    <script>
        const imageInput = document.getElementById('imageInput');
        const overlayInput = document.getElementById('overlayInput');
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const overlayGallery = document.getElementById('overlayGallery');

        const rotateLeftBtn = document.getElementById('rotateLeft');
        const rotateRightBtn = document.getElementById('rotateRight');
        const flipHorizontalBtn = document.getElementById('flipHorizontal');
        const flipVerticalBtn = document.getElementById('flipVertical');
        const saveImageBtn = document.getElementById('saveImage');

        let baseImg = new Image();
        let overlayImg = new Image();
        let customOverlayImg = new Image();
        let currentOverlaySrc = '';
        let customOverlaySrc = '';

        let presetOverlay = {
            x: 50,
            y: 50,
            width: 100,
            height: 100,
            rotation: 0,
            flipX: 1,
            flipY: 1,
            selected: true
        };

        let customOverlay = {
            x: 150,
            y: 150,
            width: 100,
            height: 100,
            rotation: 0,
            flipX: 1,
            flipY: 1,
            selected: false
        };

        let isDragging = false;
        let isResizing = false;
        let dragStartX = 0, dragStartY = 0;
        let currentResizeHandle = null;
        const resizeHandleSize = 10;
        let scale = 1;

        const overlayImageUrls = [
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/drop%20out.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/ghost.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/hmpf.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/hopefull.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/issa%20ok.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/konfuzio.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/lizard.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/love%20me.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/naaah.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/ok.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/omg%20really.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/scared.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/scheme.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/smart.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/so%20what.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/thoughtfull.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/total%20fallout.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/war.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/wow.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/yea%20whateva.png',
            'https://raw.githubusercontent.com/IllegalArtifacts/Blume/main/fck%20you.png'
        ];

        imageInput.addEventListener('change', handleImage);
        overlayInput.addEventListener('change', handleCustomOverlayImage);
        canvas.addEventListener('mousedown', handleMouseDown);
        canvas.addEventListener('mousemove', handleMouseMove);
        canvas.addEventListener('mouseup', handleMouseUp);
        canvas.addEventListener('mouseleave', handleMouseUp);

        rotateLeftBtn.addEventListener('click', () => rotateOverlay(-10));
        rotateRightBtn.addEventListener('click', () => rotateOverlay(10));
        flipHorizontalBtn.addEventListener('click', () => flipOverlay('horizontal'));
        flipVerticalBtn.addEventListener('click', () => flipOverlay('vertical'));
        saveImageBtn.addEventListener('click', saveImage);

        function fetchOverlayGallery() {
            overlayImageUrls.forEach(url => {
                const img = document.createElement('img');
                img.src = url;
                img.addEventListener('click', () => {
                    currentOverlaySrc = url;
                    overlayImg.src = currentOverlaySrc;
                    overlayImg.onload = drawImages;
                    presetOverlay.selected = true;
                    customOverlay.selected = false;
                    updateGallerySelection(img);
                });
                overlayGallery.appendChild(img);
            });
        }

        function handleImage(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    baseImg.src = e.target.result;
                    baseImg.onload = drawImages;
                };
                reader.readAsDataURL(file);
            }
        }

        function handleCustomOverlayImage(e) {
            const file = e.target.files[0];
            if (file) {
                customOverlaySrc = URL.createObjectURL(file);
                customOverlayImg.src = customOverlaySrc;
                customOverlayImg.onload = drawImages;
                customOverlay.selected = true;
                presetOverlay.selected = false;
            }
        }

        function drawImages() {
            if (baseImg.complete && baseImg.naturalWidth > 0) {
                const windowWidth = window.innerWidth;
                const windowHeight = window.innerHeight;
                scale = Math.min(windowWidth / baseImg.naturalWidth, windowHeight / baseImg.naturalHeight);

                canvas.width = baseImg.naturalWidth * scale;
                canvas.height = baseImg.naturalHeight * scale;
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

                if (currentOverlaySrc && overlayImg.complete) {
                    drawOverlay(overlayImg, presetOverlay);
                }

                if (customOverlaySrc && customOverlayImg.complete) {
                    drawOverlay(customOverlayImg, customOverlay);
                }

                if (presetOverlay.selected || customOverlay.selected) {
                    drawBoundingBox(presetOverlay);
                    drawBoundingBox(customOverlay);
                }
            }
        }

        function drawOverlay(overlay, overlayData) {
            ctx.save();
            const centerX = overlayData.x * scale + (overlayData.width * scale) / 2;
            const centerY = overlayData.y * scale + (overlayData.height * scale) / 2;

            ctx.translate(centerX, centerY);
            ctx.rotate(overlayData.rotation * Math.PI / 180);
            ctx.scale(overlayData.flipX, overlayData.flipY);
            ctx.translate(-centerX, -centerY);

            ctx.drawImage(overlay, overlayData.x * scale, overlayData.y * scale, overlayData.width * scale, overlayData.height * scale);
            ctx.restore();
        }

        function drawBoundingBox(overlayData) {
            if (overlayData.selected) {
                ctx.strokeStyle = '#FF0000';
                ctx.lineWidth = 2;
                ctx.strokeRect(overlayData.x * scale, overlayData.y * scale, overlayData.width * scale, overlayData.height * scale);

                ctx.fillStyle = '#FF0000';
                drawResizeHandle(overlayData.x * scale, overlayData.y * scale); 
                drawResizeHandle(overlayData.x * scale + overlayData.width * scale, overlayData.y * scale); 
                drawResizeHandle(overlayData.x * scale, overlayData.y * scale + overlayData.height * scale); 
                drawResizeHandle(overlayData.x * scale + overlayData.width * scale, overlayData.y * scale + overlayData.height * scale); 
            }
        }

        function drawResizeHandle(x, y) {
            ctx.fillRect(x - resizeHandleSize / 2, y - resizeHandleSize / 2, resizeHandleSize, resizeHandleSize);
        }

        function handleMouseDown(e) {
            const mouseX = e.offsetX / scale;
            const mouseY = e.offsetY / scale;

            if (presetOverlay.selected && getResizeHandle(mouseX, mouseY, presetOverlay)) {
                isResizing = true;
                currentResizeHandle = getResizeHandle(mouseX, mouseY, presetOverlay);
            } else if (customOverlay.selected && getResizeHandle(mouseX, mouseY, customOverlay)) {
                isResizing = true;
                currentResizeHandle = getResizeHandle(mouseX, mouseY, customOverlay);
            } else if (presetOverlay.selected && isWithinOverlay(mouseX, mouseY, presetOverlay)) {
                isDragging = true;
                dragStartX = mouseX - presetOverlay.x;
                dragStartY = mouseY - presetOverlay.y;
            } else if (customOverlay.selected && isWithinOverlay(mouseX, mouseY, customOverlay)) {
                isDragging = true;
                dragStartX = mouseX - customOverlay.x;
                dragStartY = mouseY - customOverlay.y;
            }
        }

        function handleMouseMove(e) {
            const mouseX = e.offsetX / scale;
            const mouseY = e.offsetY / scale;

            if (isDragging) {
                if (presetOverlay.selected) {
                    presetOverlay.x = mouseX - dragStartX;
                    presetOverlay.y = mouseY - dragStartY;
                } else if (customOverlay.selected) {
                    customOverlay.x = mouseX - dragStartX;
                    customOverlay.y = mouseY - dragStartY;
                }
                drawImages();
            } else if (isResizing) {
                if (presetOverlay.selected) {
                    resizeOverlay(mouseX, mouseY, presetOverlay);
                } else if (customOverlay.selected) {
                    resizeOverlay(mouseX, mouseY, customOverlay);
                }
                drawImages();
            }
        }

        function handleMouseUp() {
            isDragging = false;
            isResizing = false;
            currentResizeHandle = null;
        }

        function isWithinOverlay(mouseX, mouseY, overlayData) {
            return mouseX > overlayData.x && mouseX < overlayData.x + overlayData.width &&
                   mouseY > overlayData.y && mouseY < overlayData.y + overlayData.height;
        }

        function getResizeHandle(mouseX, mouseY, overlayData) {
            if (isNear(mouseX, mouseY, overlayData.x, overlayData.y)) return 'top-left';
            if (isNear(mouseX, mouseY, overlayData.x + overlayData.width, overlayData.y)) return 'top-right';
            if (isNear(mouseX, mouseY, overlayData.x, overlayData.y + overlayData.height)) return 'bottom-left';
            if (isNear(mouseX, mouseY, overlayData.x + overlayData.width, overlayData.y + overlayData.height)) return 'bottom-right';
            return null;
        }

        function isNear(x1, y1, x2, y2) {
            return Math.abs(x1 - x2) < resizeHandleSize && Math.abs(y1 - y2) < resizeHandleSize;
        }

        function resizeOverlay(mouseX, mouseY, overlayData) {
            if (currentResizeHandle === 'bottom-right') {
                overlayData.width = mouseX - overlayData.x;
                overlayData.height = mouseY - overlayData.y;
            } else if (currentResizeHandle === 'top-left') {
                const newWidth = overlayData.width - (mouseX - overlayData.x);
                const newHeight = overlayData.height - (mouseY - overlayData.y);
                if (newWidth > 0 && newHeight > 0) {
                    overlayData.width = newWidth;
                    overlayData.height = newHeight;
                    overlayData.x = mouseX;
                    overlayData.y = mouseY;
                }
            }
        }

        function rotateOverlay(angle) {
            if (presetOverlay.selected) {
                presetOverlay.rotation += angle;
            } else if (customOverlay.selected) {
                customOverlay.rotation += angle;
            }
            drawImages();
        }

        function flipOverlay(direction) {
            if (presetOverlay.selected) {
                if (direction === 'horizontal') {
                    presetOverlay.flipX *= -1;
                } else if (direction === 'vertical') {
                    presetOverlay.flipY *= -1;
                }
            } else if (customOverlay.selected) {
                if (direction === 'horizontal') {
                    customOverlay.flipX *= -1;
                } else if (direction === 'vertical') {
                    customOverlay.flipY *= -1;
                }
            }
            drawImages();
        }

        function saveImage() {
            const link = document.createElement('a');
            link.download = 'canvas-image.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
        }

        fetchOverlayGallery();
    </script>
</body>
</html>
